from b00_interface import eval_test
from t18_gost_28147_89 import gost_28147_89

gost_r_34_12_ecb_testcases = [
    [
        'Выпущенное слово и камень не имеют возврата.',
        101217936167533298980265668026151947633075532747822762347372670096545907551671,
        {
            'key': 0xb12841663
        }
    ],
    [
        'Настоящий стандарт определяет алгоритмы базовых блочных шифров, которые применяются в криптографических методах обработки и защиты информации, в том числе для обеспечения конфиденциальности, аутентичности и целостности информации при её передаче, обработке и хранении в автоматизированных системах. Определённые в настоящем стандарте алгоритмы криптографического преобразования предназначены для аппаратной или программной реализации, удовлетворяют современным криптографическим требованиям и по своим возможностям не накладывают ограничений на степень секретности защищаемой информации. Стандарт рекомендуется использовать при создании, эксплуатации и модернизации систем обработки информации различного назначения. Термины, определения и обозначения. П р и м е ч а н и е, В настоящем стандарте в целях сохранения терминологической преемственности по отношению к опубликованным научно-техническим изданиям применяется термин шифрование, объединяющий операции, определённые терминами зашифрование и расшифрование. Конкретное значение термина шифрование определяется в зависимости от контекста упоминания.',
        10856652545189207032503403211870710812807552089867772070070240305196301830747131286556081269680998142964363574505823408738210881964909750776189911504904448127776360404955108749089006881327886619155824470855773175525931874809614838285699402222422065964398425833037077566009501929402808376449025347194182004538415363606973289418424705853102967353294463241267306202875612940757432966212774210570839051352796936303798759127096367740923591762323221858484624280052590116928445749820522853644719685596525678677485894400507817246304509361902403710655596877878603809563471364709040085692283222246182335547363225819713846610080975294282326208486418188998814997409149181388908583979773973029202293709475131679869860707884032858021629147131791041894392646923906598459727179562429840725053179235536857861873130992037801156898995858254596219469116681968614401701414920665519897628134164629754824271118301449324554190983441242488315046706326752296360335755859500076817961649342698107268294944876628275480882744360822164505554331833622961224911984498265758378454362688384877306848051869518471359476680281737759936267810437727270176485890044912761372016792524276242900870196818204538545078701341085213014246746124653749695153272302259041566566525257620719610335843898294184096462803998037803361136207275894929382151552894392496779727846942253348141362454535358007463883422648870498434587203061791018128852377391681254682510492099953781550240426629578851087149249121322452238765669066004149404083100997820056965152295693993881801685951545246678240271037301569270830350936717361652015771008169802373204719362513982188681153953949293115792301046138282586081511801582331921560249628433569699096130473563150140219194881299270091451813475978629215133042332027741684820836644768418093931985487852624782581436693255202011711565448443219129374536254631061763677779434103781546,
        {
            'key': 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
        }
    ]
]

class gost_28147_89_test:
    @staticmethod
    def _encrypt_block():
        key = 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
        data = 0xfedcba9876543210
        valid = 0xecb956cad4c3e191

        res = gost_28147_89._encrypt_block(key, data)
        if res != valid:
            raise Exception(f'_encrypt_block test failed. {hex(res)} != {hex(valid)}')

    @staticmethod
    def _decrypt_block():
        key = 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
        ciphertext = 0x4ee901e5c2d8ca3d
        valid = 0xfd5aea91d87fc923

        res = gost_28147_89._decrypt_block(key, ciphertext)
        if res != valid:
            raise Exception(f'_decrypt_block test failed. {hex(res)} != {hex(valid)}')

    class ECB:
        @staticmethod
        def encrypt():
            key = 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
            data = 0x8912409b17b57e414a98fb2e67a8024cdb54c704f8189d2092def06b3c130a59
            valid = 0x3980676716fee82abf7fbbf033b4032e0d2a0a8682dde3177cdbf836e6962697

            res = gost_28147_89.ECB.encrypt(key, data)
            if res != valid:
                raise Exception(f'ECB.encrypt test failed. {hex(res)} != {hex(valid)}')

        @staticmethod
        def decrypt():
            key = 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
            ciphertext = 0x7c68260996c67efb11d8d9e9eacfbc1ede70e715d3556e482b073f0494f372a0
            valid = 0x2f9351c583de6f12a446e7adf26d1518afea05bbf2525b824b0057dd5ab45588

            res = gost_28147_89.ECB.decrypt(key, ciphertext)
            if res != valid:
                raise Exception(f'ECB.decrypt test failed. {hex(res)} != {hex(valid)}')


if __name__ == "__main__":
    gost_28147_89_test._encrypt_block()
    gost_28147_89_test._decrypt_block()
    gost_28147_89_test.ECB.encrypt()
    gost_28147_89_test.ECB.decrypt()

    eval_test(gost_28147_89.ECB_wrap, gost_r_34_12_ecb_testcases)
