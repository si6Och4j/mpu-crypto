from b00_interface import eval_test
from t07_gost_r_34_12 import magma

gost_r_34_13_2015_testcases = [
    [
        'Выпущенное слово и камень не имеют возврата.',
        216553566657865091235281165774360562075975684519432206842279240027157799,
        # 1738368152746519812965132517934776724542375216789674279486451860147111278,
        {
            'key': 0xbf0c78335160e947,
            # 'key': 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,
            'iv': 0x12345678
        }
    ],
    [
        'Настоящий стандарт определяет алгоритмы базовых блочных шифров, которые применяются в криптографических методах обработки и защиты информации, в том числе для обеспечения конфиденциальности, аутентичности и целостности информации при её передаче, обработке и хранении в автоматизированных системах. Определённые в настоящем стандарте алгоритмы криптографического преобразования предназначены для аппаратной или программной реализации, удовлетворяют современным криптографическим требованиям и по своим возможностям не накладывают ограничений на степень секретности защищаемой информации. Стандарт рекомендуется использовать при создании, эксплуатации и модернизации систем обработки информации различного назначения. Термины, определения и обозначения. П р и м е ч а н и е, В настоящем стандарте в целях сохранения терминологической преемственности по отношению к опубликованным научно-техническим изданиям применяется термин шифрование, объединяющий операции, определённые терминами зашифрование и расшифрование. Конкретное значение термина шифрование определяется в зависимости от контекста упоминания.',
        1485154552774943523521444504564308080955246627764193739711529610937108133153688823742892280022839471368741593934171307888597335782673462445169041335199565510999509761703825994458167945007879605063503779285661943226734988522557644647206498424636121990013344517233622312560888841958032312360836013970280964481294936761489784119647414408067430397152359634016385181147975640625406156285514547063189828122416134853139751693738197867741465306088396673060026162660829736583540059246166527489405448027313450496044027355750347886699586052316926307933650580925083995364134266809278826903829960408898789736580732636639410322167200730658889916623411158499480868240430604720851715881961232668434410432157825822787364209925101770254353859459307588689875662447112383591588233001528241718042545646646349845196508525656004829431425994812806512195935948393641619731162783315868671262916860996814965216884518832353125999191536970685632386797465870657614387291131462202357878160516152066394075738281739809376222996152502553217812456341968732791514574451643685015852399012202214341207610515709681879989498275609865597696887117132079933669588192989911365870726899698782088043696920859900050483448976910998066544552162088432335851722527185073626627280830327596791235518086732744656024324669878115518717093665782677433072738539813594566199384374911560092683954681223197423976827685589839742212864125025057815446092468473673007848446468283863510741010549670321636456507865155664085611235847130509889972214740198246528798001398096261596219835595428491539006003218074803072435944568088590902887470166062807672063055344349603373867405938293720807632942744147215553800258454717823997733929911958944429326099511065419140460377011276266133484916180442684434788856993340547339726711873755356230813346672203932812714503060431872275450697217144770731838202446285190439,
        # 1039203206572370140097663338429925899069279771220834387362764408561155807680807203530586205456797097154838291264206219365100595684505997659483814933376785040514588450099206690244081946120743384220594342130342483953655366765044496275983231243228568806509965572283047282683944980989053401816138323275556266329903132472255287215909630721270287924107682386968461435756495129402667128816488571838360062922793797113941203113284817905519844492645356934595989995745352100680599830036672507072362320505254742439700572427202601836056315261643778470851754293285383857948834773000914927732222697151806891600461966117946866388761177417673487536832258077703687980325558428423980888367345141472155948129827375833941549591012644703104750308362972478922535239767272123433754834017273247253944053155935617656435510687646346592013697837638981743831491572412243406515672591385282631240448081908433203220507338901295712626088214570110403873607084191503287698488705390256599204896090527330081786154605375602339828300394447776226522234850028125731307461817354799834491251702733369037835947690665001301399775950257783463431204408578837893400903451224392466885064407766519055898110774114535982592896795206537569250180856789700451991401987044377116171407398428912920769595884957227324184689094144719201041782565263059333270796255850089331219116933135126743026113574149103718906010831001693394102595066929996583854355196136530663099870713442260030928826475578685413196954291935253014946059882852608521808348112050747036493494833266938705902377194990118689469159863865227001709530367174943039823944651687772216797165342451432853844376082227719464476996134638637471362366006492351788591275444171950545120898096919268108155485956413805000042736704901257652202508333418951499888753726445010036222778048911249804274946545148929367115508249043288362983043531935155566,
        {
            'key': 0xbf0c78335160e947,
            # 'key': 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,
            'iv': 0x12345678
        }
    ]
]

class gost_r_34_13_2015_test:
    @staticmethod
    def encrypt_multiple():
        key = 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
        iv = 0x12345678
        data = 0x8912409b17b57e414a98fb2e67a8024cdb54c704f8189d2092def06b3c130a59
        size = 256
        valid = 0x568eb680ab52a12d136d868807b2dbef3e250d93d6e85d694e98110c97b7b93c

        res = magma.CTR.encrypt(key, iv, data, size)
        if res != valid:
            raise Exception(f'CTR.encrypt (multiple) test failed. {hex(res)} != {hex(valid)}')

    @staticmethod
    def decrypt_multiple():
        key = 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
        iv = 0x12345678
        ciphertext = 0x568eb680ab52a12d136d868807b2dbef3e250d93d6e85d694e98110c97b7b93c
        size = 256
        valid = 0x8912409b17b57e414a98fb2e67a8024cdb54c704f8189d2092def06b3c130a59

        res = magma.CTR.decrypt(key, iv, ciphertext, size)
        if res != valid:
            raise Exception(f'CTR.decrypt (multiple) test failed. {hex(res)} != {hex(valid)}')

    @staticmethod
    def encrypt_non_multiple():
        key = 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
        iv = 0x12345678
        data = 0x2409b17b57e414a98fb2e67a8024cdb54c704f8189d2092def06b3c130a59
        size = 244
        valid = 0xeb680ab52a12d136d868807b2dbef3e250d93d6e85d694e98110c97b7b93c

        res = magma.CTR.encrypt(key, iv, data, size)
        if res != valid:
            raise Exception(f'CTR.encrypt (non-multiple) test failed. {hex(res)} != {hex(valid)}')

    @staticmethod
    def decrypt_non_multiple():
        key = 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
        iv = 0x12345678
        ciphertext = 0xeb680ab52a12d136d868807b2dbef3e250d93d6e85d694e98110c97b7b93c
        size = 244
        valid = 0x2409b17b57e414a98fb2e67a8024cdb54c704f8189d2092def06b3c130a59

        res = magma.CTR.decrypt(key, iv, ciphertext, size)
        if res != valid:
            raise Exception(f'CTR.decrypt (non-multiple) test failed. {hex(res)} != {hex(valid)}')


if __name__ == "__main__":
    gost_r_34_13_2015_test.encrypt_multiple()
    gost_r_34_13_2015_test.decrypt_multiple()
    gost_r_34_13_2015_test.encrypt_non_multiple()
    gost_r_34_13_2015_test.decrypt_non_multiple()

    eval_test(magma.CTR_wrap, gost_r_34_13_2015_testcases)
